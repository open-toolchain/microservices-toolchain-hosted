---
defaultBaseImageVersion: latest
stages:
- name: BUILD
  inputs:
  - type: git
    branch: ${APP_REPO_BRANCH}
    service: ${ORDER_API_REPO}
  triggers:
  - type: commit
  properties:
  - name: MY_BUILD_NUMBER
    value: $GIT_BRANCH:$BUILD_NUMBER
    type: text
  jobs:
  - name: Build
    type: builder
    artifact_dir: ''
    build_type: shell
    script: |-
      #!/bin/bash
      export PATH=/opt/IBM/node-v15.14.0/bin:$PATH

      # need to set the ibmcloud api for staging env. The value defaults to cloud.ibm.com
      export match=`echo $IDS_URL | grep test`
      if [ $match ]; then
          ibmcloud api test.cloud.ibm.com
      fi

      echo "MY_BUILD_NUMBER=${MY_BUILD_NUMBER}" >> $ARCHIVE_DIR/build.properties
  - name: Fetch code
    type: builder
    artifact_dir: ''
    build_type: shell
    script: |+
      #!/bin/bash
      # set -x
      cp -R -n ./ $ARCHIVE_DIR/ || true
      source <(curl -sSL "${COMMONS_HOSTED_REGION}/scripts/fetch_git_creds.sh")
      # record Insights information
      BUILD_STATUS=pass
      ibmcloud login --apikey $API_KEY --no-region
      ibmcloud doi publishbuildrecord --logicalappname="$MY_APP_NAME" --buildnumber=$BUILD_NUMBER --branch=$GIT_BRANCH --repositoryurl=$GIT_URL --commitid=$GIT_COMMIT --status=$BUILD_STATUS
  - name: Unit Tests
    type: tester
    script: |-
      #!/bin/bash
      # set -x
      if [ -f ./tests/run-tests.sh ]; then
        source ./tests/run-tests.sh
        ibmcloud login --apikey $API_KEY --no-region
        IFS=';' read -ra locations <<< "$FILE_LOCATIONS"
        IFS=';' read -ra types <<< "$TEST_TYPES"
        if jq -e '.services[] | select(.service_id=="draservicebroker")' _toolchain.json; then
          for i in "${!locations[@]}"
          do
            echo "$i ${locations[i]} ${types[i]}"
            ibmcloud doi publishtestrecord --logicalappname="$MY_APP_NAME" --buildnumber=$BUILD_NUMBER --filelocation=${locations[i]} --type=${types[i]}
          done
          if [ $TEST_STATUS -ne 0 ]; then
            exit $TEST_STATUS
          fi
        fi
      else
        echo "Test runner script not found: ./tests/run-tests.sh"
      fi
- name: STAGING
  inputs:
  - type: job
    stage: BUILD
    job: Build
  triggers:
  - type: stage
  properties:
  - name: CF_APP_NAME
    value: undefined
    type: text
  - name: APP_URL
    value: undefined
    type: text
  - name: SAUCE_USERNAME
    value: '{{services.test.parameters.username}}'
    type: text
  - name: SAUCE_ACCESS_KEY
    value: '{{services.test.parameters.key}}'
    type: secure
  - name: HOST
    value: ondemand.saucelabs.com
    type: text
  - name: PORT
    value: '80'
    type: text
  jobs:
  - name: Deploy
    type: deployer
    target:
      region_id: ${STAGING_REGION_ID}
      organization: ${STAGING_ORG_NAME}
      space: ${STAGING_SPACE_NAME}
      application: ${CF_APP_NAME}
      api_key: ${API_KEY}
    script: |-
      #!/bin/bash
      export PATH=/opt/IBM/node-v15.14.0/bin:$PATH

      SERVICE=$(cf services | grep myMicroservicesCloudant ||:)
      if [ ! -z "$SERVICE" ]; then
        PLAN=$(echo $SERVICE | awk '{print $3}')
        if [ $PLAN == "Shared" ]; then
          echo "Attempting to delete deprecated service (myMicroservicesCloudant:$PLAN)."
          echo "Note: This can fail if the service is still bound to apps or service keys."
          echo "      If so, please delete these apps or service keys explicitly first."
          cf delete-service myMicroservicesCloudant -f
          cf create-service cloudantNoSQLDB lite myMicroservicesCloudant
        else
          echo "Keeping existing service (myMicroservicesCloudant:$PLAN)."
        fi
      else
        cf create-service cloudantNoSQLDB lite myMicroservicesCloudant
      fi
      # Push app
      export CF_APP_NAME="staging-$CF_APP"
      cf push "${CF_APP_NAME}"
      push_result=$?
      export APP_URL=https://$(cf app $CF_APP_NAME | grep -e urls: -e routes: | awk '{print $2}')
      # View logs
      #cf logs "${CF_APP_NAME}" --recent

      deploy_status="pass"
      if [ $push_result -ne 0 ]; then
         deploy_status="fail"
      fi

      # need to set the ibmcloud api for staging env. The value defaults to cloud.ibm.com
      export match=`echo $IDS_URL | grep test`
      if [ $match ]; then
          ibmcloud api test.cloud.ibm.com
      fi

      ibmcloud plugin install doi -f
      ibmcloud login --apikey $API_KEY --no-region
      ibmcloud doi publishdeployrecord --logicalappname="$MY_APP_NAME" --buildnumber=$MY_BUILD_NUMBER --env=STAGING --status=$deploy_status --joburl=$APP_URL
  - name: Sauce Labs Tests
    type: tester
    extension_id: ibm.devops.services.pipeline.saucelabs
    services:
      - ${SAUCE_LABS}
    DL_ASSETS: 'false'
    SELECT_CMD: custom
    COMMAND: |-
      #!/bin/bash
      GRUNTFILE="tests/Gruntfile.js"
      if [ -f $GRUNTFILE ]; then
        export PATH=/opt/IBM/node-v15.14.0/bin:$PATH
        npm install
        npm install -g grunt-cli

        echo $APP_URL | grep "test"
        if [ $? -eq 0 ]; then
          grunt test_fake --gruntfile $GRUNTFILE --base .
          grunt_result=$?
        else
          grunt test_real --gruntfile $GRUNTFILE --base .
          grunt_result=$?
        fi

        # need to set the ibmcloud api for staging env. The value defaults to cloud.ibm.com
        export match=`echo $IDS_URL | grep test`
        if [ $match ]; then
            ibmcloud api test.cloud.ibm.com
        fi

        ibmcloud plugin install doi -f
        ibmcloud login --apikey $API_KEY --no-region
        ibmcloud doi publishtestrecord --logicalappname="$MY_APP_NAME" --buildnumber=$MY_BUILD_NUMBER --filelocation=./xunit.xml --type=fvt

        if [ $grunt_result -ne 0 ]; then
           exit $grunt_result
        fi
      else
        echo "$GRUNTFILE not found."
      fi
    enable_tests: true
    test_file_pattern: '*.xml'
- name: PRODUCTION
  inputs:
  - type: job
    stage: BUILD
    job: Build
  triggers:
  - type: stage
  properties:
  - name: CF_APP_NAME
    value: undefined
    type: text
  - name: APP_URL
    value: undefined
    type: text
  jobs:
  - name: Production Gate
    type: tester
    script: |-
      #!/bin/bash

      # need to set the ibmcloud api for staging env. The value defaults to cloud.ibm.com
      export match=`echo $IDS_URL | grep test`
      if [ $match ]; then
         ibmcloud api test.cloud.ibm.com
      fi

      ibmcloud plugin install doi -f
      ibmcloud login --apikey $API_KEY --no-region
      ibmcloud doi evaluategate --logicalappname="$MY_APP_NAME" --buildnumber=$MY_BUILD_NUMBER --policy "PRODUCTION Deployment Checks (func test only)" --forcedecision
  - name: Blue/Green Deploy
    type: deployer
    target:
      region_id: ${PROD_REGION_ID}
      organization: ${PROD_ORG_NAME}
      space: ${PROD_SPACE_NAME}
      application: ${CF_APP_NAME}
      api_key: ${API_KEY}
    script: |-
      #!/bin/bash
      export PATH=/opt/IBM/node-v15.14.0/bin:$PATH

      SERVICE=$(cf services | grep myMicroservicesCloudant ||:)
      if [ ! -z "$SERVICE" ]; then
        PLAN=$(echo $SERVICE | awk '{print $3}')
        if [ $PLAN == "Shared" ]; then
          echo "Attempting to delete deprecated service (myMicroservicesCloudant:$PLAN)."
          echo "Note: This can fail if the service is still bound to apps or service keys."
          echo "      If so, please delete these apps or service keys explicitly first."
          cf delete-service myMicroservicesCloudant -f
          cf create-service cloudantNoSQLDB lite myMicroservicesCloudant
        else
          echo "Keeping existing service (myMicroservicesCloudant:$PLAN)."
        fi
      else
        cf create-service cloudantNoSQLDB lite myMicroservicesCloudant
      fi
      if ! cf app $CF_APP; then
        cf push $CF_APP
      else
        OLD_CF_APP=${CF_APP}-OLD-$(date +"%s")
        rollback() {
          set +e
          if cf app $OLD_CF_APP; then
            cf logs $CF_APP --recent
            cf delete $CF_APP -f
            cf rename $OLD_CF_APP $CF_APP
          fi
          exit 1
        }
        set -e
        trap rollback ERR
        cf rename $CF_APP $OLD_CF_APP
        cf push $CF_APP
        cf delete $OLD_CF_APP -f
      fi

      push_result=$?
      export APP_URL=https://$(cf app $CF_APP_NAME | grep -e urls: -e routes: | awk '{print $2}')

      deploy_status="pass"
      if [ $push_result -ne 0 ]; then
         deploy_status="fail"
      fi

      # need to set the ibmcloud api for staging env. The value defaults to cloud.ibm.com
      export match=`echo $IDS_URL | grep test`
      if [ $match ]; then
          ibmcloud api test.cloud.ibm.com
      fi

      ibmcloud plugin install doi -f
      ibmcloud login --apikey $API_KEY --no-region
      ibmcloud doi publishdeployrecord --logicalappname="$MY_APP_NAME" --buildnumber=$MY_BUILD_NUMBER --env=PRODUCTION --status=$deploy_status --joburl=$APP_URL
properties:
- name: API_KEY
  value: ${API_KEY}
  type: secure
- name: MY_APP_NAME
  value: ${CF_APP_NAME}
  type: text
- name: buildProperties
  value: build.properties
  type: file
- name: APP_REPO_BRANCH
  value: ${APP_REPO_BRANCH}
  type: text
- name: COMMONS_HOSTED_REGION
  value: ${COMMONS_HOSTED_REGION}
  type: text
